# list Comprehantion

# позволяет в декларативном виде инициализировать списки

# создадим переменную - greeting и инициализируем ее строчкой - 'hello, world'
greeting = 'hello, world'

# инициализируем массив(список) отдельных символов и добавить в него 'h e l l o , w o r l d'

chars = []                  # создадим пустой список
for l in greeting:          # запустим цикл 
    chars.append(l)         # будем добавлять в список chars через метод append текущий символ представленный в каждой итерации переменной "l"
print(chars)                # выведем список chars    

# все символы из greeting в нашем списке chars ['h', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd']

# используя list Comprehantion все это можно сделать в одну строчку (более описательно. декларативно, понятливей)

chars = [l for l in greeting]           # выбираем l из каждого l в переменной greating
print(chars)                            # chars ['h', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd']

chars = [l for l in 'bla-bla-bla']      
print(chars)                            # ['b', 'l', 'a', '-', 'b', 'l', 'a', '-', 'b', 'l', 'a']

# 

numbers = [0,1,2,3,4,5,6,7,8,9,10]
print(numbers)                          # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# 

numbers = [n for n in range(0, 11)]     # левая часть используется для модификации текущего элемента
print(numbers)                          # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


# n for n in # левая часть используется для модификации текущего элемента

# выбрать квадраты чисел от 0 до 10
numbers = [n*n for n in range(0, 11)]
print(numbers)                          # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

# выборка квадратов только нечетных чисел

numbers = [n*n for n in range(0, 11) if n%2!=0]
print(numbers)                          # [1, 9, 25, 49, 81] - квадраты чисел - 3, 5, 7, 9


# есть список длин в сантиметрах и нужно их преобразовать в дюймы и вывести

len_in_centimeters = [12,10,54,124,64]

len_in_inches = [(round(cm / 2.54, 2)) for cm in len_in_centimeters]

# "round" для округления, введём переменную "cm" разделим на 2,54 и округлить до 2 (0,02 двухсотых / второго знака после 0) 

print(len_in_inches)                    # [4.72, 3.94, 21.26, 48.82, 25.2]


# if / else в list comprehension

ratings = [2485, 2580, 2600, 2482, 2520]
titles = ['GM' if x >= 2500 else 'MM' for x in ratings]     # хотим инициализировать список титулов присваивая ГМ если >=2500 в противном случае ММ
print(titles)                                               # ['MM', 'GM', 'GM', 'MM', 'GM']


# поиск всех пар чисел из 2х списков, которые в сумме дают 0 (ноль). 

list1 = [2, 4, -5, 6, 8, -2]
list2 = [2, -6, 8, 3, 5, -2]

pairs = []

# нужно просуммировать каждый элемент из list1 с каждым элементом из list2

for x in list1:                 # сделаем внешний цикл для прохода по первому списку
    for y in list2:             # и внутренний цикл для прохода по второму списку

# действия сколько раз он будет вызван 1раз х=2 - затем вход во второй цикл 6 раз, х = 2, y = 2 / -6 / 8 / 3 / 5 / -2; 
                                                                        # затем х = 4, у = 2 / -6 / 8 / 3 / 5 / -2 и т.д. пока х = -2 и у = -2 
# и на этом оба цикла закончатся, сперва мы выйдем из внутреннего затем из внешнего циклов

        cur_sum = x + y
        if cur_sum ==0:                 # и если их сумма == 0 
            pairs.append((x, y))        # то мы добавляем текущую пару в виде tuple в наш лист pairs
print(pairs)                            # [(2, -2), (-5, 5), (6, -6), (-2, 2)]


        # решение данной задачи через list comprehension

pairs = [(x, y) for x in list1 for y in list2 if x + y == 0]

print(pairs)                            # [(2, -2), (-5, 5), (6, -6), (-2, 2)]



