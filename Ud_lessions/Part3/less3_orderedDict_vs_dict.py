# Коллекции Ordered Dict

# Определим некие словари

d1 = {}
d1['a'] = 'A'
d1['b'] = 'B'
d1['c'] = 'C'

d2 = {}
d2['b'] = 'B'
d2['a'] = 'A'
d2['c'] = 'C'

d3 = {}
d3['a'] = 'A'
d3['b'] = 'B'
d3['c'] = 'C'

#сравним их между собой
print(d1 == d2) 
print(d1 == d3)

# в обоих случаях получим - True, т.к. обычные 'dictionary' - не смотрят на порядок добавлений пар / ключ - значение

# если запустим цикл то увидим вывод в той же последовательности в которой эти значения были добавлены в словарь, 
# до версии Python 3.7 порядок словарём игнорировался

for k, v in d1.items():
    print(k, v)


# Использование Ordered Dict

from collections import OrderedDict

d1 = OrderedDict()
d1['a'] = 'A'
d1['b'] = 'B'
d1['c'] = 'C'

d2 = OrderedDict()
d2['b'] = 'B'
d2['a'] = 'A'
d2['c'] = 'C'

d3 = OrderedDict()
d3['a'] = 'A'
d3['b'] = 'B'
d3['c'] = 'C'

#сравним их между собой
print(d1 == d2) # False - означает что OrderedDict - внутренне при сравнении учитывает порядок добавления пар ключ-значений, 
# не смотря на то что между собой пары ключ-значений абсолютно идентичны, словари d1 и d2 по значениям одинаковы, но с точки зрения добавления пар
# они не равны, т.о. OrderedDict контролирует порядок добавления пар ключ-значений
print(d1 == d3) # True

